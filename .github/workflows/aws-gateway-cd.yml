name: Deploy to Amazon ECS gateway

on:
  pull_request:
    branches:
      - main
#    paths:
#      - 'gateway/**'

env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: bobjool/gateway         # set this to your Amazon ECR repository name
  ECS_SERVICE: bobjool-gateway-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: bobjool-cluster                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/bobjool-gateway-task-revision1.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: bobjool-gateway-container           # set this to the name of the container in the
  EUREKA_HOSTNAME: bobjool-eureka-lb-160323905.ap-northeast-2.elb.amazonaws.com
  GATEWAY_SERVICE_PORT: 19005
  REDIS_HOST: 52.79.241.24
  SHARED_REDIS_PORT: 6379
  # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build:
    name: Build Jar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -p gateway

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-libs
          path: gateway/build/libs/*.jar # 정확한 빌드 결과물 경로 지정


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-libs
          path: gateway/build/libs

      - name: Copy Build Artifacts to Docker Context
        run: cp gateway/build/libs/*.jar .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          EUREKA_HOSTNAME: ${{ env.EUREKA_HOSTNAME }}
          GATEWAY_SERVICE_PORT: ${{ env.GATEWAY_SERVICE_PORT }}
          REDIS_HOST: ${{ env.REDIS_HOST }}
          SHARED_REDIS_PORT: ${{ env.SHARED_REDIS_PORT }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build --build-arg SPRING_PROFILES_ACTIVE=prod \
                       --build-arg EUREKA_HOSTNAME=$EUREKA_HOSTNAME \
                       --build-arg GATEWAY_SERVICE_PORT=$GATEWAY_SERVICE_PORT \
                       --build-arg REDIS_HOST=$REDIS_HOST \
                       --build-arg SHARED_REDIS_PORT=$SHARED_REDIS_PORT
                       -t ${{ steps.login-ecr.outputs.registry }}/bobjool/gateway:$GITHUB_SHA \
                       -f gateway/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          timeout: 600 # 안정화 대기 시간을 초 단위로 설정 (예: 10분)
