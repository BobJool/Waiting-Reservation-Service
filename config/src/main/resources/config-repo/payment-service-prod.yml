server:
  port: ${PAYMENT_SERVICE_PORT:19060} # 포트도 환경변수로 관리

spring:
  application:
    name: payment-service
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL}/payment_db
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: validate # 운영에서는 보통 validate 사용 (스키마 변경 방지)
    show-sql: false # 운영에서는 SQL 로그를 출력하지 않음
    properties:
      format-sql: false
      use_sql_comments: false
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  jackson:
    property-naming-strategy: SNAKE_CASE
  kafka:
    bootstrap-servers: ${KAFKA_SERVER_URL}
    consumer:
      group-id: ${SPRING_APPLICATION_NAME}-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${SHARED_REDIS_PORT:6379}

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server:19000/eureka/

management:
  endpoints:
    web:
      exposure.include: refresh # /actuator/refresh 노출 (설정 변경 반영용)
#  zipkin:
#    tracing:
#      endpoint: "http://localhost:9411/api/v2/spans"
#  tracing:
#    sampling:
#      probability: 1.0 # 모든 요청 추적 (운영에서 필요 시 조정)
