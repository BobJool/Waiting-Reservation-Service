server:
  port: 19050

spring:
  application:
    name: notification-service
  config:
    import: classpath:application-key.yml
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/notification_db
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      format-sql: true
      use_sql_comments: true
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  jackson:
    property-naming-strategy: SNAKE_CASE
  kafka:
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    bootstrap-servers: ${KAFKA_SERVER_URL}

notification:
  template-mapping:
    queue:
      registered: b2e9aebb-001d-462b-8012-854ee6aca1f5
      delayed: b2e9aebb-001d-462b-8012-854ee6aca1f5
      remind: b2e9aebb-001d-462b-8012-854ee6aca1f5
      alerted: b2e9aebb-001d-462b-8012-854ee6aca1f5
      rush: b2e9aebb-001d-462b-8012-854ee6aca1f5
      canceled: b2e9aebb-001d-462b-8012-854ee6aca1f5
    reservation:
      completed: b2e9aebb-001d-462b-8012-854ee6aca1f5
      failed: b2e9aebb-001d-462b-8012-854ee6aca1f5
      refund: b2e9aebb-001d-462b-8012-854ee6aca1f5
      remind: b2e9aebb-001d-462b-8012-854ee6aca1f5

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:19000/eureka/

token:
  slack:
    oauth: ${SLACK_OAUTH_TOKEN}

#management:
#  zipkin:
#    tracing:
#      endpoint: "http://localhost:9411/api/v2/spans"
#  tracing:
#    sampling:
#      probability: 1.0